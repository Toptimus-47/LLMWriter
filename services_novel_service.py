{"cells":[{"cell_type":"code","source":"# services/novel_service.py\nfrom models.novel import Novel, Chapter\nfrom services.file_service import FileService\nfrom services.llm_service import LLMService\nfrom services.vector_store_service import VectorStoreService\nfrom config import config\nfrom typing import List, Optional\n\nclass NovelService:\n    \"\"\"\n    애플리케이션의 핵심 비즈니스 로직을 총괄하는 서비스.\n    UI(Streamlit)와 데이터/LLM 서비스 간의 중재자 역할을 합니다.\n    \"\"\"\n    def __init__(self):\n        self.file_service = FileService()\n        self.llm_service = LLMService()\n        # VectorStoreService는 특정 소설이 로드될 때 인스턴스화됩니다.\n        self.vector_store: Optional[VectorStoreService] = None\n\n    def list_novels(self) -> List[str]:\n        \"\"\"저장된 모든 소설의 제목 리스트를 반환합니다.\"\"\"\n        return self.file_service.list_novels()\n\n    def create_new_novel(self, title: str) -> Optional[Novel]:\n        \"\"\"새로운 소설 프로젝트를 생성합니다.\"\"\"\n        if self.file_service.create_novel_scaffold(title):\n            novel = Novel(title=title)\n            # 기본 설정 파일 저장\n            self.file_service.save_settings(novel)\n            return novel\n        return None\n\n    def load_novel(self, title: str) -> Optional[Novel]:\n        \"\"\"기존 소설을 불러옵니다.\"\"\"\n        try:\n            novel = self.file_service.load_novel(title)\n            novel_dir = self.file_service.get_novel_dir(title)\n            self.vector_store = VectorStoreService(novel_dir)\n            \n            # 소설의 전체 텍스트를 기반으로 요약 정보가 없다면 생성\n            if novel.chapters and not novel.summary:\n                novel.summary = self.llm_service.summarize_text(novel.full_text)\n            \n            return novel\n        except FileNotFoundError:\n            return None\n\n    def save_novel(self, novel: Novel):\n        \"\"\"현재 작업 중인 소설의 모든 데이터를 저장합니다.\"\"\"\n        # 1. 설정 저장\n        self.file_service.save_settings(novel)\n        \n        # 2. 챕터 저장 (기존 챕터는 덮어쓰기)\n        for i in range(len(novel.chapters)):\n            self.file_service.save_chapter(novel, i)\n            \n        # 3. 벡터 DB 저장\n        if self.vector_store:\n            self.vector_store.save_index()\n\n    def generate_prologue(self, novel: Novel):\n        \"\"\"프롤로그를 생성하고 소설 객체에 추가합니다.\"\"\"\n        prologue_content = self.llm_service.generate_prologue(novel)\n        \n        # 1. 챕터 추가\n        prologue_chapter = Chapter(title=\"프롤로그\", content=prologue_content)\n        novel.chapters.append(prologue_chapter)\n        \n        # 2. 벡터 DB 초기화 및 프롤로그 추가\n        novel_dir = self.file_service.get_novel_dir(novel.title)\n        self.vector_store = VectorStoreService(novel_dir)\n        self.vector_store.add_document(prologue_content, chapter_index=0)\n        \n        # 3. 전체 내용 요약\n        novel.summary = self.llm_service.summarize_text(novel.full_text)\n        \n        # 4. 변경사항 저장\n        self.save_novel(novel)\n\n    def generate_next_chapter(self, novel: Novel):\n        \"\"\"다음 챕터를 생성하고 소설 객체에 추가합니다.\"\"\"\n        if not novel.last_chapter_text or not self.vector_store:\n            raise ValueError(\"다음 챕터를 생성하기 위한 컨텍스트가 부족합니다.\")\n\n        # 1. RAG를 위한 컨텍스트 검색\n        rag_context = self.vector_store.search(\n            query=novel.last_chapter_text, \n            k=config.RAG_TOP_K\n        )\n        \n        # 2. LLM을 통해 다음 챕터 내용 생성\n        next_chapter_content = self.llm_service.generate_next_chapter(novel, rag_context)\n        \n        # 3. 챕터 추가\n        chapter_index = len(novel.chapters)\n        new_chapter = Chapter(title=f\"챕터 {chapter_index}\", content=next_chapter_content)\n        novel.chapters.append(new_chapter)\n        \n        # 4. 벡터 DB에 새 챕터 추가\n        self.vector_store.add_document(next_chapter_content, chapter_index)\n        \n        # 5. 전체 내용 요약 업데이트\n        novel.summary = self.llm_service.summarize_text(novel.full_text)\n        \n        # 6. 변경사항 저장\n        self.save_novel(novel)","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}