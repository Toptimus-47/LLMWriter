{"cells":[{"cell_type":"code","source":"# main_app.py\nimport streamlit as st\nimport os\nfrom services.novel_service import NovelService\nfrom models.character import Character\n\n# --- 페이지 설정 ---\nst.set_page_config(page_title=\"AI 소설 어시스턴트\", layout=\"wide\")\n\n# --- 서비스 초기화 ---\n# 서비스 인스턴스는 한 번만 생성하여 st.session_state에 저장\nif 'novel_service' not in st.session_state:\n    st.session_state.novel_service = NovelService()\n\n# --- 헬퍼 함수 ---\ndef reset_ui_state():\n    \"\"\"새 소설을 시작하거나 불러올 때 UI 상태 초기화\"\"\"\n    st.session_state.current_novel = None\n    st.session_state.character_list = []\n    st.session_state.new_char_name = \"\"\n    st.session_state.new_char_personality = \"\"\n    st.session_state.new_char_appearance = \"\"\n    st.session_state.selected_chapter_title = None\n\ndef load_novel_to_session(novel_title):\n    \"\"\"선택된 소설을 세션 상태로 불러오는 함수\"\"\"\n    novel_service = st.session_state.novel_service\n    novel = novel_service.load_novel(novel_title)\n    if novel:\n        st.session_state.current_novel = novel\n        st.session_state.character_list = novel.settings.characters\n        st.success(f\"'{novel_title}' 소설을 성공적으로 불러왔습니다.\")\n    else:\n        st.error(\"소설을 불러오는 데 실패했습니다.\")\n        reset_ui_state()\n\n# --- 사이드바 UI ---\nwith st.sidebar:\n    st.title(\"📚 AI 소설 어시스턴트\")\n    st.markdown(\"---\")\n\n    st.header(\"새 소설 시작\")\n    new_novel_title = st.text_input(\"소설 제목 입력\", key=\"new_novel_title_input\")\n    if st.button(\"새 소설 만들기\"):\n        if new_novel_title:\n            reset_ui_state()\n            novel_service = st.session_state.novel_service\n            novel = novel_service.create_new_novel(new_novel_title)\n            st.session_state.current_novel = novel\n            st.success(f\"새 소설 '{new_novel_title}' 생성 완료! 설정을 시작하세요.\")\n        else:\n            st.warning(\"소설 제목을 입력해주세요.\")\n\n    st.markdown(\"---\")\n    st.header(\"소설 불러오기\")\n    \n    novel_service = st.session_state.novel_service\n    available_novels = novel_service.list_novels()\n    \n    selected_novel_to_load = st.selectbox(\n        \"불러올 소설 선택\",\n        options=[\"\"] + available_novels,\n        key=\"load_novel_select\"\n    )\n\n    if st.button(\"선택한 소설 불러오기\"):\n        if selected_novel_to_load:\n            reset_ui_state()\n            load_novel_to_session(selected_novel_to_load)\n        else:\n            st.warning(\"불러올 소설을 선택해주세요.\")\n\n# --- 메인 페이지 UI ---\nif 'current_novel' not in st.session_state:\n    st.session_state.current_novel = None\n\nif st.session_state.current_novel:\n    novel = st.session_state.current_novel\n    st.header(f\"📖 현재 작업중인 소설: {novel.title}\")\n\n    # 소설 생성 전 설정 탭\n    if not novel.chapters:\n        st.info(\"소설 생성을 시작하기 전에 아래 설정을 완료하고 '프롤로그 생성' 버튼을 눌러주세요.\")\n        \n        settings_tab, characters_tab = st.tabs([\"기본 설정\", \"등장인물\"])\n\n        with settings_tab:\n            st.subheader(\"기본 설정\")\n            novel.settings.style = st.text_area(\"문체\", value=novel.settings.style, placeholder=\"예: 건조하고 간결한 문체, 화려하고 시적인 묘사\")\n            novel.settings.pov = st.selectbox(\"시점\", [\"1인칭 주인공\", \"3인칭 관찰자\", \"3인칭 전지적\"], index=2)\n            \n            col1, col2, col3 = st.columns(3)\n            with col1:\n                novel.settings.time_bg = st.text_input(\"시간적 배경\", value=novel.settings.time_bg, placeholder=\"예: 2077년, 근미래\")\n            with col2:\n                novel.settings.space_bg = st.text_input(\"공간적 배경\", value=novel.settings.space_bg, placeholder=\"예: 사이버펑크 도시 '네오-서울'\")\n            with col3:\n                novel.settings.social_bg = st.text_input(\"사회적 배경\", value=novel.settings.social_bg, placeholder=\"예: 거대 기업이 모든 것을 지배하는 사회\")\n\n            novel.settings.prologue_length = st.number_input(\"프롤로그 분량 (단어 수)\", min_value=100, max_value=2000, value=novel.settings.prologue_length, step=100)\n            novel.settings.chapter_length = st.number_input(\"챕터당 평균 분량 (단어 수)\", min_value=100, max_value=3000, value=novel.settings.chapter_length, step=100)\n\n        with characters_tab:\n            st.subheader(\"등장인물 관리\")\n            \n            if 'character_list' not in st.session_state:\n                st.session_state.character_list = novel.settings.characters\n\n            # 등장인물 목록 표시\n            for i, char in enumerate(st.session_state.character_list):\n                with st.expander(f\"**{char.name}**\"):\n                    st.write(f\"**성격:** {', '.join(char.personality)}\")\n                    st.write(f\"**외모:** {', '.join(char.appearance)}\")\n                    if st.button(f\"{char.name} 삭제\", key=f\"del_char_{i}\"):\n                        st.session_state.character_list.pop(i)\n                        novel.settings.characters = st.session_state.character_list\n                        st.rerun()\n\n            st.markdown(\"---\")\n            st.subheader(\"새 등장인물 추가\")\n            \n            with st.form(\"new_char_form\", clear_on_submit=True):\n                char_name = st.text_input(\"이름\", key=\"new_char_name\")\n                \n                # 키워드 입력을 위한 멀티셀렉트 구현\n                personality_keywords_str = st.text_input(\"성격 키워드 (쉼표로 구분)\", key=\"new_char_personality\")\n                appearance_keywords_str = st.text_input(\"외모 키워드 (쉼표로 구분)\", key=\"new_char_appearance\")\n\n                submitted = st.form_submit_button(\"등장인물 추가\")\n                if submitted and char_name:\n                    personality = [k.strip() for k in personality_keywords_str.split(',') if k.strip()]\n                    appearance = [k.strip() for k in appearance_keywords_str.split(',') if k.strip()]\n                    new_char = Character(name=char_name, personality=personality, appearance=appearance)\n                    st.session_state.character_list.append(new_char)\n                    novel.settings.characters = st.session_state.character_list\n                    st.success(f\"등장인물 '{char_name}' 추가 완료!\")\n\n        st.markdown(\"---\")\n        if st.button(\"✨ 프롤로그 생성 시작\", type=\"primary\", use_container_width=True):\n            with st.spinner(\"Gemini 2.5 Flash가 프롤로그를 창작하고 있습니다...\"):\n                try:\n                    novel_service.generate_prologue(novel)\n                    st.success(\"프롤로그 생성이 완료되었습니다!\")\n                    st.rerun()\n                except Exception as e:\n                    st.error(f\"프롤로그 생성 중 오류 발생: {e}\")\n\n    # 소설 생성 후 뷰\n    else:\n        col1, col2 = st.columns([2, 1])\n        \n        with col1:\n            st.subheader(\"📜 소설 본문\")\n            \n            chapter_titles = [f\"프롤로그\"] + [f\"챕터 {i+1}\" for i in range(len(novel.chapters) - 1)]\n            \n            if 'selected_chapter_title' not in st.session_state or st.session_state.selected_chapter_title is None:\n                st.session_state.selected_chapter_title = chapter_titles[-1]\n\n            def on_chapter_select():\n                st.session_state.selected_chapter_title = st.session_state.chapter_selector\n            \n            st.selectbox(\n                \"열람할 챕터 선택\", \n                options=chapter_titles, \n                index=chapter_titles.index(st.session_state.selected_chapter_title),\n                key=\"chapter_selector\",\n                on_change=on_chapter_select\n            )\n\n            selected_index = chapter_titles.index(st.session_state.selected_chapter_title)\n            st.markdown(f\"### {st.session_state.selected_chapter_title}\")\n            st.markdown(novel.chapters[selected_index].content.replace(\"\\n\", \"\\n\\n\"))\n\n        with col2:\n            st.subheader(\"⚙️ 작업 관리\")\n            \n            if st.button(\"다음 챕터 생성\", use_container_width=True):\n                with st.spinner(\"다음 챕터를 생성하고 있습니다...\"):\n                    try:\n                        novel_service.generate_next_chapter(novel)\n                        st.session_state.selected_chapter_title = f\"챕터 {len(novel.chapters) - 1}\"\n                        st.success(\"다음 챕터 생성 완료!\")\n                        st.rerun()\n                    except Exception as e:\n                        st.error(f\"챕터 생성 중 오류 발생: {e}\")\n\n            if st.button(\"💾 현재 소설 저장\", use_container_width=True):\n                with st.spinner(\"소설을 저장하는 중...\"):\n                    try:\n                        novel_service.save_novel(novel)\n                        st.success(\"소설이 성공적으로 저장되었습니다.\")\n                    except Exception as e:\n                        st.error(f\"저장 중 오류 발생: {e}\")\n\n            st.markdown(\"---\")\n            st.subheader(\"🧠 소설 메모리 (요약)\")\n            st.text_area(\"요약\", value=novel.summary, height=200, disabled=True)\n\nelse:\n    st.info(\"👈 사이드바에서 '새 소설 만들기'를 선택하거나 기존 소설을 불러와주세요.\")","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}