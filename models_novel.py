{"cells":[{"cell_type":"code","source":"# models/novel.py\nfrom dataclasses import dataclass, field\nfrom typing import List, Optional\nfrom models.character import Character\n\n@dataclass\nclass NovelSettings:\n    \"\"\"소설의 전반적인 설정 데이터 클래스\"\"\"\n    style: str = \"\"\n    pov: str = \"3인칭 전지적\"\n    time_bg: str = \"\"\n    space_bg: str = \"\"\n    social_bg: str = \"\"\n    prologue_length: int = 500\n    chapter_length: int = 1000\n    characters: List[Character] = field(default_factory=list)\n\n    def to_dict(self):\n        return {\n            \"style\": self.style,\n            \"pov\": self.pov,\n            \"time_bg\": self.time_bg,\n            \"space_bg\": self.space_bg,\n            \"social_bg\": self.social_bg,\n            \"prologue_length\": self.prologue_length,\n            \"chapter_length\": self.chapter_length,\n            \"characters\": [char.to_dict() for char in self.characters],\n        }\n\n    @staticmethod\n    def from_dict(data: dict):\n        return NovelSettings(\n            style=data.get(\"style\", \"\"),\n            pov=data.get(\"pov\", \"3인칭 전지적\"),\n            time_bg=data.get(\"time_bg\", \"\"),\n            space_bg=data.get(\"space_bg\", \"\"),\n            social_bg=data.get(\"social_bg\", \"\"),\n            prologue_length=data.get(\"prologue_length\", 500),\n            chapter_length=data.get(\"chapter_length\", 1000),\n            characters=[Character.from_dict(c) for c in data.get(\"characters\", [])],\n        )\n\n@dataclass\nclass Chapter:\n    \"\"\"챕터 데이터 클래스\"\"\"\n    title: str\n    content: str\n\n@dataclass\nclass Novel:\n    \"\"\"소설 전체를 나타내는 메인 데이터 클래스\"\"\"\n    title: str\n    settings: NovelSettings = field(default_factory=NovelSettings)\n    chapters: List[Chapter] = field(default_factory=list)\n    summary: str = \"\" # LLM이 생성한 전체 내용 요약\n\n    @property\n    def full_text(self) -> str:\n        \"\"\"모든 챕터의 본문을 합쳐서 반환\"\"\"\n        return \"\\n\\n---\\n\\n\".join([c.content for c in self.chapters])\n\n    @property\n    def last_chapter_text(self) -> Optional[str]:\n        \"\"\"가장 마지막 챕터의 본문만 반환\"\"\"\n        return self.chapters[-1].content if self.chapters else None","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}