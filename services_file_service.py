{"cells":[{"cell_type":"code","source":"# services/file_service.py\nimport os\nimport json\nimport shutil\nfrom typing import List\nfrom config import config\nfrom models.novel import Novel, NovelSettings, Chapter\n\nclass FileService:\n    \"\"\"\n    소설 데이터의 파일 및 디렉토리 관리를 담당하는 서비스.\n    각 소설은 'novels/소설제목' 디렉토리 아래에 모든 데이터를 저장합니다.\n    \"\"\"\n    def __init__(self):\n        os.makedirs(config.NOVELS_DIR, exist_ok=True)\n\n    def get_novel_dir(self, title: str) -> str:\n        \"\"\"소설 제목에 해당하는 디렉토리 경로를 반환합니다.\"\"\"\n        return os.path.join(config.NOVELS_DIR, title)\n\n    def list_novels(self) -> List[str]:\n        \"\"\"저장된 모든 소설의 제목(디렉토리명) 리스트를 반환합니다.\"\"\"\n        try:\n            return [d for d in os.listdir(config.NOVELS_DIR) if os.path.isdir(os.path.join(config.NOVELS_DIR, d))]\n        except FileNotFoundError:\n            return []\n\n    def create_novel_scaffold(self, title: str) -> bool:\n        \"\"\"새 소설을 위한 디렉토리 구조를 생성합니다.\"\"\"\n        novel_dir = self.get_novel_dir(title)\n        if os.path.exists(novel_dir):\n            return False # 이미 존재하는 경우\n        \n        os.makedirs(novel_dir)\n        os.makedirs(os.path.join(novel_dir, config.CHAPTERS_DIR))\n        os.makedirs(os.path.join(novel_dir, config.VECTOR_STORE_DIR))\n        return True\n\n    def save_settings(self, novel: Novel):\n        \"\"\"소설의 설정(settings.json)을 저장합니다.\"\"\"\n        novel_dir = self.get_novel_dir(novel.title)\n        settings_path = os.path.join(novel_dir, config.SETTINGS_FILENAME)\n        with open(settings_path, 'w', encoding='utf-8') as f:\n            json.dump(novel.settings.to_dict(), f, ensure_ascii=False, indent=4)\n\n    def save_chapter(self, novel: Novel, chapter_index: int):\n        \"\"\"특정 챕터를 파일로 저장합니다.\"\"\"\n        novel_dir = self.get_novel_dir(novel.title)\n        chapter = novel.chapters[chapter_index]\n        chapter_filename = f\"{chapter_index:04d}_{chapter.title}.txt\"\n        chapter_path = os.path.join(novel_dir, config.CHAPTERS_DIR, chapter_filename)\n        with open(chapter_path, 'w', encoding='utf-8') as f:\n            f.write(chapter.content)\n\n    def load_novel(self, title: str) -> Novel:\n        \"\"\"디렉토리에서 소설 전체 데이터를 불러옵니다.\"\"\"\n        novel_dir = self.get_novel_dir(title)\n        if not os.path.isdir(novel_dir):\n            raise FileNotFoundError(f\"소설 디렉토리를 찾을 수 없습니다: {title}\")\n\n        # 설정 파일 로드\n        settings_path = os.path.join(novel_dir, config.SETTINGS_FILENAME)\n        with open(settings_path, 'r', encoding='utf-8') as f:\n            settings_data = json.load(f)\n        settings = NovelSettings.from_dict(settings_data)\n        \n        novel = Novel(title=title, settings=settings)\n\n        # 챕터 파일 로드\n        chapters_dir = os.path.join(novel_dir, config.CHAPTERS_DIR)\n        chapter_files = sorted(os.listdir(chapters_dir))\n        for filename in chapter_files:\n            if filename.endswith(\".txt\"):\n                # 파일명에서 제목 추출 (예: 0000_프롤로그.txt)\n                chapter_title = os.path.splitext(filename)[0].split('_', 1)[1]\n                with open(os.path.join(chapters_dir, filename), 'r', encoding='utf-8') as f:\n                    content = f.read()\n                novel.chapters.append(Chapter(title=chapter_title, content=content))\n        \n        # TODO: 요약 정보도 별도 파일로 저장하고 불러오는 로직 추가 가능\n        \n        return novel","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}